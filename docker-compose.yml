version: '3.4'

services:
  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_NUM_PARTITIONS: 3
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: alura
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  
  init-kafka:
    image: bitnami/kafka:latest
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
        "
        kafka-topics --bootstrap-server kafka:9092 --list
        echo -e 'Creating kafka topics'
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic weatherforecast-requested --replication-factor 1 --partitions 1
        echo -e 'Successfully created the following topics:'
        kafka-topics --bootstrap-server kafka:9092 --list
        "
  #   networks:
  #     - services

  pagamento:
    container_name: pagamentoApi
    image: ${DOCKER_REGISTRY-}pagamento
    build:
      context: .
      dockerfile: src/Pagamento/Dockerfile
    # networks:
    #   - services
    ports:
      - "8000:80"
    depends_on:
      - mongodb
      - kafka
        
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/

  mongodb:
    image: mongo
    container_name: noSql
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      SALES_PASSWORD: ${SALES_PASSWORD:-sales}
      WAREHOUSE_PASSWORD: ${WAREHOUSE_PASSWORD:-warehouse}
    ports:
      - "27017:27017"
    # networks:
    #   - services
    #entrypoint: [ "/usr/bin/mongod", "--config", "/data/config/ssl.conf", "--bind_ip_all", "--replSet", "dbrs" ]  
    volumes:
      - ./src/scripts/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      # - ./.db/mongo1:/data/db
      # #- ./wait-for-mongodb.sh:/scripts/wait-for-mongodb.sh
      # - ./ssl:/data/ssl
      # - ./config:/data/config
#
#  # mongo-express:
#  #   image: mongo-express
#  #   ports:
#  #     - 8081:8081
#  #   environment:
#  #     ME_CONFIG_BASICAUTH_USERNAME: renatogroffe
#  #     ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress2019!
#  #     ME_CONFIG_MONGODB_PORT: 27017
#  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
#  #     ME_CONFIG_MONGODB_ADMINPASSWORD: MongoDB2019!
#  #   links:
#  #     - mongo
#  #   networks:
#  #     - services
#  #zookeeper:
#  #  image: confluentinc/cp-zookeeper:latest
#  #  environment:
#  #      ZOOKEEPER_CLIENT_PORT: 2181
#  #      ZOOKEEPER_TICK_TIME: 2000
#  ##   networks:
#  ##     - services  
#
#  #kafka:
#  #  image: confluentinc/cp-kafka:latest
#  #  container_name: topics
#  #  ports:
#  #    - 9092:9092
#  #  expose:
#  #    - '29092'
#  #  environment:
#  #    KAFKA_BROKER_ID: 1
#  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#  #    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#  ##   healthcheck:
#  ##       test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
#  ##       interval: 30s
#  ##       timeout: 10s
#  ##       retries: 10
#  ##   networks:
#  ##     - services
#  #  depends_on:
#  #    - zookeeper
#
#
#  kafka:
#    image: bitnami/kafka:latest
#    restart: on-failure
#    #container_name: topics
#    ports:
#      - 9092:9092
#    expose:
#      - '29092'
#    environment:
#  #    KAFKA_BROKER_ID: 1
#  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#  #    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_CFG_BROKER_ID: 1
#      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_CFG_NUM_PARTITIONS: 3
#      ALLOW_PLAINTEXT_LISTENER: yes
#    depends_on:
#      - zookeeper
#
#  zookeeper:
#    image: bitnami/zookeeper:latest
#    ports:
#      - 2181:2181
#    environment:
#      ALLOW_ANONYMOUS_LOGIN: yes
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    depends_on:
#      - kafka
#      - zookeeper
#    ports:
#      - "8080:8080"
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=alura
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#
#  init-kafka:
#    image: confluentinc/cp-kafka:latest
#    entrypoint: [ '/bin/sh', '-c' ]
#    command: |
#        "
#        kafka-topics --bootstrap-server kafka:29092 --list
#        echo -e 'Creating kafka topics'
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic weatherforecast-requested --replication-factor 1 --partitions 1
#        echo -e 'Successfully created the following topics:'
#        kafka-topics --bootstrap-server kafka:29092 --list
#        "
#  #   networks:
#  #     - services
#
## networks: 
##     services:
##       driver: bridge